Andrew MacNeille
Steve Petrides
Systems Programming
18 September 2016

There are two major methods in the implementation of the string tokenizer, one that extracts tokens
from the input string and a method that appends the token in alphabetical order. 


The tokens are stored using a linked list structure. A struct, node is created with three members,
char * token, which is a pointer to a char array that holds the actual token, node * next which is a
pointer to the next node in the list and int length which is the size of the token. 

As nodes are extracted from the input they are appended to the list in the correct order. Three
methods are used in order to sort the nodes, toUpper(), compareTokens() and extractTokens().

char toUpper (char c);

-Determines if a character is lower case and returns uppercase version of character. It does so by 
subtracting the current character by 32 utilizing the ascii integer value of the character.

int compareTokens(Node * n, Node * ptr);

-Compares the capitalized version of the first character in both tokens, the one being added to the 
list and the token that is already in the list and being compared with. If the new token character is
less than the present tokens character, again using the ascii integer value of the character, the new 
token is inserted before before the present one. If the character is larger than the present tokens
character the pointer is incremented and the next token in the list is observed. If both characters 
the same value the next character in both tokens is compared.

-If, for example, there are two tokens, "Andrew" and "And", the token with less characters is inserted
before the larger one. 

-Calls method toUpper() to do comparisons 

-The method extractTokens() calls compareTokens() and inserts the node to the linked list in front of
the node being compared. It does so by maintaining two pointers which traverse the list. 


Sorting Algorithm

- head, ptrA, ptrB are Node pointers

	if ptrA has another node after:
		if ptrA == ptrB == head:
			if n needs to go before head:
				n->next = head;
				head = n;
			else:
				ptr = ptrA->next;
		else:
			if n needs to go before ptrA:
				ptrB->next = n;
				n->next = ptrA;
			else:
				ptrA = ptrA->next;
				ptrB = ptrB->next;
		else:
		if n needs to go before ptrA:
			ptrB->next = n;
			n->next = ptrA;
		else:
			ptrA->next = n;



extractTokens(char * input, size_t inputSize)

-There are two parameters, a pointer to the beginning of the input string and the size of the    
input string.

-The method utilizes two pointers to isolate each token, tokenStart and tokenEnd. tokenEnd traverses
the character array and stops on the first character that is not a letter. Once tokenEnd stops the
address of tokenEnd is subtracted with the address of tokenStart to obtain the size of the token. A
piece of memory is then malloced to the size of the determined token. tokenStart next points to where
tokenEnd is pointing to and the method subsequently looks for another token.

-The entire input in traversed in a while loop until the pointer reaches the null terminator.